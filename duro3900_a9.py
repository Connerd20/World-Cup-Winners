{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "0a1606c8-02e1-40bf-bf5b-2cb81b57d69a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x2f97c60f7a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import dash\n",
    "from dash import dcc, html, Input, Output\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "\n",
    "# Dataset\n",
    "def create_worldcup_dataset():\n",
    "    data = {\n",
    "        'Year': [1930, 1934, 1938, 1950, 1954, 1958, 1962, 1966, 1970, 1974, \n",
    "                 1978, 1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014, 2018, 2022],\n",
    "        'Winner': ['Uruguay', 'Italy', 'Italy', 'Uruguay', 'West Germany', 'Brazil', \n",
    "                   'Brazil', 'England', 'Brazil', 'West Germany', 'Argentina', \n",
    "                   'Italy', 'Argentina', 'West Germany', 'Brazil', 'France', \n",
    "                   'Brazil', 'Italy', 'Spain', 'Germany', 'France', 'Argentina'],\n",
    "        'Runner-up': ['Argentina', 'Czechoslovakia', 'Hungary', 'Brazil', 'Hungary', \n",
    "                      'Sweden', 'Czechoslovakia', 'West Germany', 'Italy', 'Netherlands', \n",
    "                      'Netherlands', 'West Germany', 'West Germany', 'Argentina', \n",
    "                      'Italy', 'Brazil', 'Germany', 'France', 'Netherlands', \n",
    "                      'Argentina', 'Croatia', 'France'],\n",
    "        'Score': ['4-2', '2-1 (OT)', '4-2', '2-1', '3-2', '5-2', '3-1', '4-2 (OT)', \n",
    "                  '4-1', '2-1', '3-1 (OT)', '3-1', '3-2', '1-0', '0-0 (OT) (3-2 p)', \n",
    "                  '3-0', '2-0', '1-1 (OT) (5-3 p)', '1-0 (OT)', '1-0 (OT)', \n",
    "                  '4-2', '3-3 (OT) (4-2 p)'],\n",
    "        'Venue': ['Montevideo', 'Rome', 'Paris', 'Rio de Janeiro', 'Bern', 'Solna', \n",
    "                  'Santiago', 'London', 'Mexico City', 'Munich', 'Buenos Aires', \n",
    "                  'Madrid', 'Mexico City', 'Rome', 'Pasadena', 'Saint-Denis', \n",
    "                  'Yokohama', 'Berlin', 'Johannesburg', 'Rio de Janeiro', 'Moscow', 'Lusail']\n",
    "    }\n",
    "    return pd.DataFrame(data)\n",
    "\n",
    "# Create DataFrame\n",
    "world_cup_df = create_worldcup_dataset()\n",
    "\n",
    "# Country names, combine West Germany and Germany\n",
    "world_cup_df['Winner'] = world_cup_df['Winner'].replace({'West Germany': 'Germany'})\n",
    "world_cup_df['Runner-up'] = world_cup_df['Runner-up'].replace({'West Germany': 'Germany'})\n",
    "\n",
    "# country-code mapping\n",
    "country_codes = {\n",
    "    'Argentina': 'ARG',\n",
    "    'Brazil': 'BRA',\n",
    "    'England': 'GBR',\n",
    "    'France': 'FRA',\n",
    "    'Germany': 'DEU',\n",
    "    'Italy': 'ITA',\n",
    "    'Netherlands': 'NLD',\n",
    "    'Spain': 'ESP',\n",
    "    'Uruguay': 'URY',\n",
    "    'Czechoslovakia': 'CZE', \n",
    "    'Hungary': 'HUN',\n",
    "    'Sweden': 'SWE',\n",
    "    'Croatia': 'HRV'\n",
    "}\n",
    "\n",
    "# Prep data for map\n",
    "def prepare_choropleth_data(df):\n",
    "    # Count wins\n",
    "    winners = df['Winner'].value_counts().reset_index()\n",
    "    winners.columns = ['Country', 'Wins']\n",
    "    winners['ISO'] = winners['Country'].map(country_codes)\n",
    "    # Count runner-up\n",
    "    runners_up = df['Runner-up'].value_counts().reset_index()\n",
    "    runners_up.columns = ['Country', 'Runner-ups']\n",
    "    runners_up['ISO'] = runners_up['Country'].map(country_codes)\n",
    "    \n",
    "    # Merge data\n",
    "    merged = pd.merge(winners, runners_up, on=['Country', 'ISO'], how='outer').fillna(0)\n",
    "    merged['Total Finals'] = merged['Wins'] + merged['Runner-ups']\n",
    "    \n",
    "    return merged\n",
    "\n",
    "choropleth_data = prepare_choropleth_data(world_cup_df)\n",
    "# Initialize Dash\n",
    "app = dash.Dash(__name__)\n",
    "server = app.server\n",
    "\n",
    "# Define layout\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"FIFA World Cup Winners and Runner-up\", style={'textAlign': 'center'}),\n",
    "    html.P(\"Note: West Germany and Germany are combined as 'Germany'\", style={'textAlign': 'center', 'color': 'gray'}),\n",
    "    \n",
    "    html.Div([\n",
    "        html.Div([\n",
    "            dcc.Dropdown(\n",
    "                id='map-type-dropdown',\n",
    "                options=[\n",
    "                    {'label': 'World Cup Wins', 'value': 'Wins'},\n",
    "                    {'label': 'Runner-up Appearances', 'value': 'Runner-ups'},\n",
    "                    {'label': 'Total Finals Appearances', 'value': 'Total Finals'}\n",
    "                ],\n",
    "                value='Wins',\n",
    "                clearable=False,\n",
    "                style={'width': '100%'}\n",
    "            ),\n",
    "            dcc.Graph(id='world-map')\n",
    "        ], style={'width': '48%', 'display': 'inline-block'}),\n",
    "        \n",
    "        html.Div([\n",
    "            dcc.Dropdown(\n",
    "                id='year-dropdown',\n",
    "                options=[{'label': str(year), 'value': year} for year in world_cup_df['Year']],\n",
    "                value=world_cup_df['Year'].max(),\n",
    "                clearable=False,\n",
    "                style={'width': '100%'}\n",
    "            ),\n",
    "            html.Div(id='year-details', style={'marginTop': '20px', 'padding': '10px', 'border': '1px solid #ddd'})\n",
    "        ], style={'width': '48%', 'display': 'inline-block', 'float': 'right'})\n",
    "    ]),\n",
    "    \n",
    "    html.Div([\n",
    "        html.Div([\n",
    "            dcc.Dropdown(\n",
    "                id='country-dropdown',\n",
    "                options=[{'label': country, 'value': country} for country in choropleth_data['Country']],\n",
    "                value='Brazil',\n",
    "                clearable=False,\n",
    "                style={'width': '100%'}\n",
    "            ),\n",
    "            html.Div(id='country-stats', style={'marginTop': '20px', 'padding': '10px', 'border': '1px solid #ddd'})\n",
    "        ], style={'width': '48%', 'display': 'inline-block'}),\n",
    "        \n",
    "        html.Div([\n",
    "            html.H3(\"All World Cup Winners\"),\n",
    "            html.Ul([html.Li(country) for country in choropleth_data['Country']])\n",
    "        ], style={'width': '48%', 'display': 'inline-block', 'float': 'right', 'padding': '10px'})\n",
    "    ], style={'marginTop': '20px'})\n",
    "])\n",
    "\n",
    "# choropleth map callback\n",
    "@app.callback(\n",
    "    Output('world-map', 'figure'),\n",
    "    Input('map-type-dropdown', 'value')\n",
    ")\n",
    "def update_map(selected_stat):\n",
    "    fig = px.choropleth(\n",
    "        choropleth_data,\n",
    "        locations=\"ISO\",\n",
    "        color=selected_stat,\n",
    "        hover_name=\"Country\",\n",
    "        hover_data=[\"Wins\", \"Runner-ups\"],\n",
    "        color_continuous_scale=px.colors.sequential.Plasma,\n",
    "        title=f\"World Cup {selected_stat} by Country\"\n",
    "    )\n",
    "    \n",
    "    fig.update_layout(\n",
    "        margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0},\n",
    "        coloraxis_colorbar=dict(title=selected_stat),\n",
    "        geo=dict(showframe=False, showcoastlines=True, projection_type='equirectangular')\n",
    "    )\n",
    "    \n",
    "    return fig\n",
    "\n",
    "# callback for year\n",
    "@app.callback(\n",
    "    Output('year-details', 'children'),\n",
    "    Input('year-dropdown', 'value')\n",
    ")\n",
    "def update_year_details(selected_year):\n",
    "    year_data = world_cup_df[world_cup_df['Year'] == selected_year].iloc[0]\n",
    "    \n",
    "    # original names in year details\n",
    "    original_winner = 'West Germany' if (selected_year in [1954, 1974, 1990]) and (year_data['Winner'] == 'Germany') else year_data['Winner']\n",
    "    original_runner = 'West Germany' if (selected_year in [1966, 1982, 1986]) and (year_data['Runner-up'] == 'Germany') else year_data['Runner-up']\n",
    "    \n",
    "    return [\n",
    "        html.H3(f\"World Cup {selected_year}\"),\n",
    "        html.P(f\"Winner: {original_winner}\"),\n",
    "        html.P(f\"Runner-up: {original_runner}\"),\n",
    "        html.P(f\"Score: {year_data['Score']}\"),\n",
    "        html.P(f\"Venue: {year_data['Venue']}\")\n",
    "    ]\n",
    "\n",
    "# Callback for country\n",
    "@app.callback(\n",
    "    Output('country-stats', 'children'),\n",
    "    Input('country-dropdown', 'value')\n",
    ")\n",
    "def update_country_stats(selected_country):\n",
    "    country_data = choropleth_data[choropleth_data['Country'] == selected_country].iloc[0]\n",
    "    \n",
    "    # Get all years the country won\n",
    "    if selected_country == 'Germany':\n",
    "        wins = world_cup_df[(world_cup_df['Winner'] == 'Germany') | \n",
    "                          (world_cup_df['Winner'] == 'West Germany')]['Year'].unique().tolist()\n",
    "    else:\n",
    "        wins = world_cup_df[world_cup_df['Winner'] == selected_country]['Year'].tolist()\n",
    "    \n",
    "    # Get all years the country was runner-up\n",
    "    if selected_country == 'Germany':\n",
    "        runners_up = world_cup_df[(world_cup_df['Runner-up'] == 'Germany') | \n",
    "                                (world_cup_df['Runner-up'] == 'West Germany')]['Year'].unique().tolist()\n",
    "    else:\n",
    "        runners_up = world_cup_df[world_cup_df['Runner-up'] == selected_country]['Year'].tolist()\n",
    "    \n",
    "    return [\n",
    "        html.H3(f\"{selected_country} World Cup History\"),\n",
    "        html.P(f\"Total Wins: {int(country_data['Wins'])}\"),\n",
    "        html.P(\"Won in: \" + \", \".join(map(str, sorted(wins))) if wins else \"No wins\"),\n",
    "        html.P(f\"Runner-up Appearances: {int(country_data['Runner-ups'])}\"),\n",
    "        html.P(\"Runner-up in: \" + \", \".join(map(str, sorted(runners_up))) if runners_up else \"No runner-up appearances\")\n",
    "    ]\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aea3c6c8-de22-4c1a-9558-fd5dfdde0885",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
